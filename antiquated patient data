import pandas as pd
import csv
import numpy as np
import re
import os
import fnmatch
from datetime import datetime

work_dir = '/Users/DickersonLab/Desktop/Alex-winter-proj/'
os.chdir(work_dir)

def find(pattern, path):
    result = []
    for root, dirs, files in os.walk(path):
        for name in files:
            if fnmatch.fnmatch(name, pattern):
                result.append(os.path.join(root, name))
    return result


lang_files = find('*.xls', work_dir + '/Patients/')

data = []

full_dates = pd.DataFrame()
count = 0

date_error = []

for file in lang_files:  # Iterate through every found excel file
    single_ID = pd.DataFrame()

    if 'lang' in file:    
    
        #Find subject's name from file path
        single_ID['Subject'] = []
        m = re.search(work_dir + '/Patients/LastNameA_F/(.+?)/', file)
        if m:
            found = m.group(1)
        m = re.search(work_dir + '/Patients/LastNameG_M/(.+?)/', file)
        if m:
            found = m.group(1)
        m = re.search(work_dir + '/Patients/LastNameN_Z/(.+?)/', file)
        if m:
            found = m.group(1)
        single_ID.ix[0, 'Subject'] = found
    
        match = re.search(r'/(\d\d\d\d\d\d)/', file)
        if match is None:
            match = re.search(r'(\d\d\d\d\d\d)/', file)
            if match is None:
                match = re.search(r'(\d\d\d\d\d\d).xls', file)
                if match is None:
                    match = re.search(r'(\d\d_\d\d_\d\d)', file)
                    if match is None:
                        match = re.search(r'(\d\d.\d\d.\d\d)', file)
                        if match is None:
                            match = re.search(r'_(\d\d\d\d\d\d)', file)
                            if match is None:
                                date_error.append(file)
                                single_ID.ix[0, 'Date'] = ''
                            else:
                                date = datetime.strptime((match.group())[1:], '%m%d%y').date()
                                single_ID.ix[0, 'Date'] = str(date)
                        else:
                            date = datetime.strptime((match.group()), '%m.%d.%y').date()
                            single_ID.ix[0, 'Date'] = str(date)
                    else:
                        date = datetime.strptime((match.group()), '%m_%d_%y').date()
                        single_ID.ix[0, 'Date'] = str(date)
                else:
                    date = datetime.strptime((match.group())[:-4], '%m%d%y').date()
                    single_ID.ix[0, 'Date'] = str(date)
            else:
                date = datetime.strptime((match.group())[:-1], '%m%d%y').date()
                single_ID.ix[0, 'Date'] = str(date)
        else:
            date = datetime.strptime((match.group())[1:-1], '%m%d%y').date()
            single_ID.ix[0, 'Date'] = str(date)
        
        if single_ID['Date'] is None:
            date_error.append(file)

    full_dates = full_dates.append(single_ID)
    full_dates = full_dates.drop_duplicates(['Subject', 'Date'])

full_dates = full_dates.sort_index(by=['Subject', 'Date'], ascending=[True, True])
full_dates = full_dates.apply(lambda x: x.astype(str).str.lower())
full_dates = full_dates.drop_duplicates(['Subject', 'Date'])
full_dates = full_dates.reset_index()
full_dates = full_dates.drop('index', 1)

last = full_dates.drop_duplicates(['Subject'], keep='last')
last['Date'] = last['Date'].map(lambda x: str(x)[:-6])
last = last.reset_index()
last = last.drop('index', 1)

last = last.apply(pd.to_numeric, errors='ignore')

for i in last.index:
    if last.ix[i][1] > 2009:
        last = last.drop([i])
