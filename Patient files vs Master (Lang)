# -*- coding: utf-8 -*-
import pandas as pd
import csv
import numpy as np
import re
import os
import fnmatch
from datetime import datetime

work_dir = '/Users/DickersonLab/Desktop/Alex-winter-proj/'
os.chdir(work_dir)

def find(pattern, path):
    result = []
    for root, dirs, files in os.walk(path):
        for name in files:
            if fnmatch.fnmatch(name, pattern):
                result.append(os.path.join(root, name))
    return result

lang_file = work_dir + 'PPA_Master_spreadsheet_050117.xlsx'
lang = pd.read_excel(lang_file, 'lang data', encoding='utf-8')
lang['name'] = lang['lname'] + '_'+ lang['fname']
lang_df = lang[['name','testing date1','testing date2',
                    'testing date3','testing date4','testing date5',
                    'testing date6','Testing date 7']]
lang_df = lang_df.applymap(str)
lang_df['testing date1'] = lang_df['testing date1'].map(lambda x: str(x)[:-9])
lang_df['testing date2'] = lang_df['testing date2'].map(lambda x: str(x)[:-9])
lang_df['testing date3'] = lang_df['testing date3'].map(lambda x: str(x)[:-9])
lang_df['testing date4'] = lang_df['testing date4'].map(lambda x: str(x)[:-9])
lang_df['testing date5'] = lang_df['testing date5'].map(lambda x: str(x)[:-9])
lang_df['testing date6'] = lang_df['testing date6'].map(lambda x: str(x)[:-9])
lang_df['Testing date 7'] = lang_df['Testing date 7'].map(lambda x: str(x)[:-9])

lang_df.replace(r'', np.nan)

row = [1,2,3,4,5,6,7]
single_dates = pd.DataFrame(columns = ['Subject', 'Date'])

for n in lang_df.index:
    for m in row:
        if (lang_df.ix[n][m] is not '') == True:
            unit = []
            unit.append(lang_df.ix[n][0])
            unit.append(lang_df.ix[n][m])
            
            unitdf = pd.DataFrame([unit], columns = ['Subject', 'Date'])
            single_dates = single_dates.append(unitdf)
single_dates = single_dates.drop_duplicates(['Subject', 'Date'])
# single_dates now has a single list of all mastersheet patient visit dates

lang_files = find('*.xls', work_dir + '/Patients/')

data = []

full_dates = pd.DataFrame()
count = 0

date_error = []

ID_error_firstname = []
ID_error_lastname = []
ID_error_date = []
ID_error = []

for file in lang_files:  # Iterate through every found excel file
    single_ID = pd.DataFrame()

    #Find subject's name from file path
    single_ID['Subject'] = []
    m = re.search(work_dir + '/Patients/LastNameA_F/(.+?)/', file)
    if m:
        found = m.group(1)
    m = re.search(work_dir + '/Patients/LastNameG_M/(.+?)/', file)
    if m:
        found = m.group(1)
    m = re.search(work_dir + '/Patients/LastNameN_Z/(.+?)/', file)
    if m:
        found = m.group(1)
    single_ID.ix[0, 'Subject'] = found

    match = re.search(r'/(\d\d\d\d\d\d)/', file)
    if match is None:
        match = re.search(r'(\d\d\d\d\d\d)/', file)
        if match is None:
            match = re.search(r'(\d\d\d\d\d\d).xls', file)
            if match is None:
                match = re.search(r'(\d\d_\d\d_\d\d)', file)
                if match is None:
                    match = re.search(r'(\d\d.\d\d.\d\d)', file)
                    if match is None:
                        match = re.search(r'_(\d\d\d\d\d\d)', file)
                        if match is None:
                            date_error.append(file)
                            single_ID.ix[0, 'Date'] = ''
                        else:
                            date = datetime.strptime((match.group())[1:], '%m%d%y').date()
                            single_ID.ix[0, 'Date'] = str(date)
                    else:
                        date = datetime.strptime((match.group()), '%m.%d.%y').date()
                        single_ID.ix[0, 'Date'] = str(date)
                else:
                    date = datetime.strptime((match.group()), '%m_%d_%y').date()
                    single_ID.ix[0, 'Date'] = str(date)
            else:
                date = datetime.strptime((match.group())[:-4], '%m%d%y').date()
                single_ID.ix[0, 'Date'] = str(date)
        else:
            date = datetime.strptime((match.group())[:-1], '%m%d%y').date()
            single_ID.ix[0, 'Date'] = str(date)
    else:
        date = datetime.strptime((match.group())[1:-1], '%m%d%y').date()
        single_ID.ix[0, 'Date'] = str(date)
    
    if single_ID['Date'] is None:
        ID_error_date.append(file)

    full_dates = full_dates.append(single_ID)
    full_dates = full_dates.drop_duplicates(['Subject', 'Date'])
    full_dates = full_dates.reset_index()
    full_dates = full_dates.drop('index', 1)
#full_dates now has all visits from patient files

total_error = pd.DataFrame()
merge = pd.merge(full_dates, single_dates, indicator=True, how='outer',on=['Subject', 'Date'])

final = merge.drop('_merge', axis=1)

for q in final.index:
    if merge.loc[q]['_merge'] == 'both':
        final = final.drop([q])
    if merge.loc[q]['_merge'] == 'left_only':
        final.loc[q]['Missing'] = 'only in patient files'
    if merge.loc[q]['_merge'] == 'right_only':
        final.loc[q]['Missing'] = 'only in master sheet'

final.to_csv('lang-Patient files vs master.csv', encoding='utf-8')
